export const agentChatResponse = {
    emailSentMessage: "Your personal assistance request has been received and is currently being reviewed by our YankiAl agents. Depending on your subscription, you can expect to receive a response via the email address or SMS number registered with us. Press the start button to initiate a live chat with an assistant.",
    agentAvailabe: " If an agent is available, the chat will begin in a few seconds.",
    chatYankiAgent: "Chat With Yanki Agent",
    chatYankiAgentTitle: "Please describe what you need help with. (Note that the ability of Yanki to resolve your query may vary based on your current subscription.)",
    yankiUser: "yankiUser",
    numeric: "numeric",
    chatAgentContainer: "chat-agent-container",
    chatAgentHeading: "chat-agent-heading",
    chatAgentTitle: "chat-agent-title",
    userChatContainer: "user-chat-container",
    smallUserChatContainer: "small-user-chat-container",
    messageContainer: "message-container",
    messageOutgoingContainer: "message-outgoing-container",
    messageIncomingContainer: "message-incoming-container",
    agentAvtar: "agentAvtar",
    agentLogo: "AgentLogo",
    message: "message",
    incoming: "incoming",
    outgoing: "outgoing",
    userMessageTime: "user-message-time",
    incomingTime: "incoming-time",
    outgoingTime: "outgoing-time",
    userAvtar: "userAvtar",
    chatWithAgentContainer: "chat-with-agent-container",
    chatWithAgent: "chat-with-agent",
    smallChatWithAgent: "small-chat-with-agent",
    searchQuery: "searchQuery",
    sendButton: "send-button",
    chatwithAgentPlaceholder: "Chat with Agent",
    emailSentMessageClass: "email-sent-message",
    startChatContainer: "start-chat-container",
    startChat: "start-chat",
    startingChat: "Starting Chat",
    submit: "submit",
    smallScreen: "sm",
    mediumScreen: "md",
    largeScreen: "lg",
    eventRequestContainer: "event-request-container",
    zeroWidth: "0",
    drawerOpenWidth: "270px",
    enterpriseFormBox: "enterpriseFormBox",
    enterpriseFormBoxHide: "enterpriseFormBoxHide",
    enterpriseFormBoxShow: "enterpriseFormBoxShow",
    drawerOpenCalcWidth: "calc(100% - 270px)",
    hundredWidth: "100%",
    noUserMessage: "no-user-message",
    chatContainer: "chat-container",
    userListHide: "user-list-hide",
    userListContainer: "user-list-container",
    userInfoContainer: "user-info-container",
    userImage: "user-image",
    userInfo: "user-info",
    userDetails: "user-details",
    userEmail: "user-email",
    lastMessageTime: "last-message-time",
    lastMessage: "last-message",
    messageListContainer: "messageList-container",
    userListHideClass: "userListHide",
    userListShow: "userListShow",
    chatHeader: "chat-header",  
    chatHeaderBackArrow: "chat-header-back-arrow",
    backArrow: "backarrow",
    chatHeaderUserImage: "chat-header-user-image",
    userListHideImage: "user-list-hide-image",
    userListShowImage: "user-list-show-image",
    chatHeaderInfoHide: "chat-header-info-hide",
    chatHeaderInfo: "chat-header-info",
    chatHeaderInfoEmail: "chat-header-info-email",
    chatHeaderInfoStatus: "chat-header-info-status",
    messageContentContainer: "message-content-container",
    messageContent: "message-content",
    messageItem: "message-item",
    messageOutgoing: "message-outgoing",
    messageIncoming: "message-incoming",
    messageTime: "message-time",
    timestampOutgoing: "timestamp-outgoing",
    timestampIncoming: "timestamp-incoming",
    chatBox: "chat-box",
    chatInputContainer: "chat-input-container",
    typeMessage: "Type a message",
    start: "start",
    smileyIcon: "smiley-icon",
    chatInputField: "chat-input-field",
    inputFieldHide: "input-field-hide",
    inputFieldShow: "input-field-show",
    userChatSession: "user-chat-session",
    activeChatSession: "activeChatSession",
    deactivateChatSession: "deactivateChatSession",
    receiveMessage: "ReceiveMessage",
    sendButtonMessage: "send-button-message",
    enterprise: "Enterprise",
    customDisableLight: "Custom-disable-light",
    chatHeaderHideUserList: "chat-header-hide-user-list",
    agentChatContainerShow: "agent-chat-container-show",
    agentChatContainerHide: "agent-chat-container-hide",
    messageBox: "message-box",
    unseenMessageCount: "unseen-message-count",
    headerInformation: "header-information",
    admin: "Admin",
    newUser: "NewUser",
    chatFinished: "The chat hase been finished",
    errorFinishChat: "Error to finish the chat",
    additionalInformation: "additional-information",
    finishChatContainer: "finish-chat-container",
    messageIcon: "messageIcon",
    finishChat: "finish-chat",
    currentUserInformation: "current-user-information",
    threedotIcon: "threedotIcon",
    userInformationCloseIcon: "user-information-close-icon",
    closeIcon: "CloseIcon",
    inputFieldOpenModal: "input-field-open-modal",
    chatFinishedNotice: "chat-finished-notice",
    chatBackground: "chat-background",
    finished: "finished",
    chatMenuDropdown: "chat-menu-dropdown",
    chatMenuDropdownList: "chat-menu-dropdown-list",
    finishChatIcon: "finish-chat-icon",
    finishChatTitle: "Finish Chat",
    userinfoTitle: "User Info",
    agentChatBackground: "agent-chat-background",
    hideChatContainer: "hideChatContainer",
    chatInformationContainer: "chat-information-container",
    chatInformationContainerModalOpen: "chat-information-container-modal-open",
    userGeneralInfoContainer: "user-general-info-container",
    userGeneralInfoChatClose: "user-general-info-chat-close",
    userGeneralInfoChatOpen: "user-general-info-chat-open",
    userDetailsNotFound: "user-details-not-found",
    userGeneralInfoHeader: "user-general-info-header",
    userGeneralInfoHeaderTitle: "user-general-info-header-title",
    userGeneralInfoContent: "user-general-info-content",
    userGeneralDetailsContent: "user-general-details-content",
    userGeneralDetailsContainer: "user-general-details-container",
    userGeneralDetailsQuestion: "user-general-details-question",
    userGeneralDetailsAnswer: "user-general-details-answer",
    userOtherInformationContainer: "user-other-information-container",
    userOtherInformationTitle: "user-other-information-title",
    userOtherInformationContent: "user-other-information-content",
    yes: "Yes",
    no: "No",
    user: "User",
    jumpToUserChatComponet: "jumpToUserChatComponet",
    jumpToUserChatComponetId: "#jumpToUserChatComponet",
    agentChatSessionContainer: "agent-chat-session-container",
    chatFinishedTitle: "chat-finished-title",
    valueNotProvided: "Value not provided",
    orthodoxJudaism: "Which branch of Orthodox Judaism do you identify with?",
    ageRange: "What is your age range?",
    maritalStatus: "Marital status?",
    numberOfChildren: "Do you have children? If so, how many, what are their ages and schools?",
    location: "Where do you live?",
    levelOfReligiousObservance: "What is your level of religious observance?",
    religiousPractices: "Which Jewish practices and rituals do you regularly observe?",
    synagogueCommunity: "Which synagogue or community do you primarily associate with?",
    updatedWithCommunityEvents: "Are you looking to be updated with your community events?",
    volunteerInterests: "Are you interested in volunteering within the community?",
    yes: "Yes",
    no: "No",
    religiousNeedsAndChallenges: "Religious Needs and Challenges:",
    religiousChallenges: "What are the biggest challenges you face in maintaining your religious observance in daily life?",
    toolForOvercomeChallenges : "What resources or tools would be most helpful to you in overcoming these challenges?",
    ideaToEnhanceReligiousExperience: "What types of ideas or resources would you find most valuable to enhance your religious experience?",
    religiousStudies: "If yes, what topics are you most interested in?",
    notAddDataAICustomization : "User has not added data in AI customization.",
    generalInformation : "General Information",
    isXLScreen: "(min-width:1200px)" 
}

export const apiUrls = {
    getUserMessage: (chatSessionId) => `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/get-user-message?Id=${chatSessionId}`,
    signalRConnection: `${import.meta.env.VITE_APP_API_HOST}/chat`,
    userChatList: `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/get-user-list`,
    getAdminMessage: (id) => `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/get-admin-message?id=${id}`,
    sendMessage: `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/send-message`,
    chatNavigateUrl: '/admin/chat',
    chatNavigateUrlById: (id) => `/admin/chat/${id}`,
    getUserListById: (id) => `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/get-user-list-id?Id=${id}`,
    getUserStatus: `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/user-status`,
    finishChat: (id) => `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/finish-chat?id=${id}`,
    getAgentChatSession: `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/get-agent-chat-session`,
    getUserGeneralInformation: (Id) => `${import.meta.env.VITE_APP_API_HOST}/api/agent-chat/get-custom-prompt-id?userId=${Id}`,
    personalAssistantEmail: `${import.meta.env.VITE_APP_API_HOST}/api/yanki-ai/personal-assistant-email`,
}